{"version":3,"sources":["components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["module","exports","NewCommentForm","props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddComment","quoteId","useEffect","className","classes","form","onSubmit","event","preventDefault","enteredText","current","value","commentData","text","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","LoadingSpinner","length","onClick","HighlightedQuote","quote","author","QuoteDetail","match","useRouteMatch","getSingleQuote","loadedQuote","path","exact","to","url"],"mappings":"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","file":"static/js/4.811794c8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__TnZa_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__Bf4Q2\",\"loading\":\"NewCommentForm_loading__InQOY\",\"control\":\"NewCommentForm_control__21s4Y\",\"actions\":\"NewCommentForm_actions__PGNNw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__1lnNY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__2qJzs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__2xd14\"};","import { useRef, useEffect } from \"react\";\n\nimport useHttp from \"../../hooks/use-http\";\nimport { addComment } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./NewCommentForm.module.css\";\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  const { sendRequest, status, error } = useHttp(addComment, true);\n\n  const { onAddComment, quoteId } = props;\n\n  useEffect(() => {\n    if (status === \"completed\" && !error) {\n      onAddComment();\n    }\n  }, [status, error, onAddComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n    const enteredText = commentTextRef.current.value;\n    commentTextRef.current.value = \"\";\n    // optional: Could validate here\n\n    // send comment to server\n    sendRequest({ commentData: { text: enteredText }, quoteId: quoteId });\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {/* {status === \"pending\" && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )} */}\n      <div className={classes.control}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport CommentsList from \"./CommentsList\";\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n  const { quoteId } = params;\n\n  const {\n    sendRequest,\n    status,\n    data: loadedComments,\n  } = useHttp(getAllComments, true);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [quoteId, sendRequest]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  let comments;\n\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (status === \"completed\" && loadedComments && loadedComments.length > 0) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n\n  if (\n    status === \"completed\" &&\n    (!loadedComments || loadedComments.length === 0)\n  ) {\n    comments = <p className=\"centered\">No comments were added yet!</p>;\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm onAddComment={addedCommentHandler} quoteId={quoteId} />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { Fragment, useEffect } from \"react\";\r\nimport { Route, useParams, Link, useRouteMatch } from \"react-router-dom\";\r\nimport Comments from \"../components/comments/Comments\";\r\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getSingleQuote } from \"../lib/api\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\n\r\nconst QuoteDetail = () => {\r\n  const match = useRouteMatch();\r\n  const params = useParams();\r\n\r\n  const { quoteId } = params;\r\n\r\n  const {\r\n    sendRequest,\r\n    status,\r\n    data: loadedQuote,\r\n    error,\r\n  } = useHttp(getSingleQuote, true);\r\n\r\n  useEffect(() => {\r\n    sendRequest(quoteId);\r\n  }, [sendRequest, quoteId]);\r\n\r\n  if (status === \"pending\")\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n\r\n  if (error) return <p className=\"centered\">{error}</p>;\r\n\r\n  if (!loadedQuote.text) return <p>No Quote Found!</p>;\r\n\r\n  return (\r\n    <Fragment>\r\n      <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\r\n      <Route path={match.path} exact>\r\n        <div className=\"centered\">\r\n          <Link className=\"btn--flat\" to={`${match.url}/comments`}>\r\n            Load Comments\r\n          </Link>\r\n        </div>\r\n      </Route>\r\n      <Route path={`${match.path}/comments`}>\r\n        <Comments />\r\n      </Route>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default QuoteDetail;\r\n\r\n// Load Quotes from backEnd\r\n"],"sourceRoot":""}